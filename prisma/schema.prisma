// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  address     String?
  city        String?
  zip         String?
  gender      String?
  role        Role     @default(CUSTOMER)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
  reviews     Review[]
}

model Product {
  id          String     @id @default(cuid())
  name        String
  price       Float
  category    String
  gender      String
  image       String
  description String?
  ribbon      String?
  colors      String[]
  tags        String[]
  rating      Float      @default(0)
  reviewsCount Int       @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  brand       Brand      @relation(fields: [brandId], references: [id])
  brandId     String
  reviews     Review[]
  OrderLine   OrderLine[]
}

model Brand {
  id        String    @id @default(cuid())
  name      String    @unique
  logo      String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id              String      @id @default(cuid())
  total           Float
  status          OrderStatus @default(PENDING)
  customer        User        @relation(fields: [userId], references: [id])
  userId          String
  shippingAddress Json
  lines           OrderLine[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderLine {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float // price at time of purchase
  color     String
  lensType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id        String           @id @default(cuid())
  name      String
  email     String
  phone     String
  date      DateTime
  time      String
  status    AppointmentStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  rating    Float
  comment   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum Role {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
